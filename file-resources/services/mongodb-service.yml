#########################################################
## MongoDB Service
#########################################################
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  ports:
    - name: mongodb-tcp
      port: 27017
      protocol: TCP
      targetPort: 27017
  selector:
    app: mongodb

#########################################################
## MongoDB Deployment
#########################################################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        stackId: data
        traefik.enable: true
        traefik.tcp.routers.mongodb-router.entrypoints: mongo-tcp
        traefik.tcp.routers.mongodb-router.rule: HostSNI(`localhost`)
        traefik.tcp.routers.mongodb-router.service: mongodb
        traefik.tcp.routers.mongodb-router.tls: true
        traefik.tcp.routers.mongodb-router.tls.options: default
        traefik.tcp.services.mongodb.loadbalancer.server.port: 27017
    spec:
      containers:
        - name: mongodb
          image: docker.io/library/mongo:6
          args:
            - --quiet
            - --keyFile
            - /data/db/rs-keys/rs-key
            - --replSet
            - demo-rs
            - --bind_ip_all
            - --auth
            - --enableFreeMonitoring
            - off
            - --journal
          volumeMounts:
            - mountPath: /data/db
              name: mongodb-data-dir
            - mountPath: /data/configdb
              name: mongodb-data-configdb-dir
          livenessProbe:
            exec:
              command:
                - mongosh
                - --quiet
                - --eval
                - "db.runCommand('ping').ok"
            initialDelaySeconds: 5
            periodSeconds: 5
      initContainers:
        - name: 01-mongodb-init
          image: docker.io/library/mongo:6
          command:
            - init-entrypoint-wrapper.sh
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: superuser
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: test
            - name: MONGO_INITDB_DATABASE
              value: admin
          volumeMounts:
            - mountPath: /data/db
              name: mongodb-data-dir
            - mountPath: /data/configdb
              name: mongodb-data-configdb-dir
            - mountPath: /docker-entrypoint-initdb.d
              name: mongodb-initdb-dir
            - mountPath: /usr/local/bin/init-entrypoint-wrapper.sh
              name: mongodb-entrypoint-wrapper
        - name: 02-mongodb-rs-init
          image: docker.io/library/mongo:6
          command:
            - init-replica-set.sh
          args:
            - --fork
            - --logpath
            - "/dev/stdout"
            - --keyFile
            - /data/db/rs-keys/rs-key
            - --replSet
            - demo-rs
            - --auth
            - --journal
          volumeMounts:
            - mountPath: /data/db
              name: mongodb-data-dir
            - mountPath: /data/configdb
              name: mongodb-data-configdb-dir
            - mountPath: /usr/local/bin/init-replica-set.sh
              name: mongodb-init-replica-set
      volumes:
        - name: mongodb-data-dir
          hostPath:
            path: "/tmp/vault-demo/mongodb/db"
            type: Directory
        - name: mongodb-data-configdb-dir
          hostPath:
            path: "/tmp/vault-demo/mongodb/configdb"
            type: Directory
        - name: mongodb-initdb-dir
          hostPath:
            path: "/tmp/vault-demo/mongodb/init-scripts"
            type: Directory
        - name: mongodb-entrypoint-wrapper
          hostPath:
            path: "/tmp/vault-demo/mongodb/util-scripts/init-entrypoint-wrapper.sh"
            type: File
        - name: mongodb-init-replica-set
          hostPath:
            path: "/tmp/vault-demo/mongodb/util-scripts/init-replica-set.sh"
            type: File
